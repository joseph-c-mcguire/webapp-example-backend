data_path: 'data\predictive_maintenance.csv'
model_directory: 'models\'
## We'll drop Failure Type as it's likely not going to be available to us at prediction time, so it's somewhat of a data leakage issue.
columns_to_drop: ['Product ID', 'Failure Type'] 
columns_to_scale: ['Air temperature [K]','Process temperature [K]','Rotational speed [rpm]','Torque [Nm]','Tool wear [min]']
columns_to_encode: ['Type']
target_column: 'Target'
param_grids: {
        'Logistic Regression': {
            'C': [0.1, 1, 10]
            },
        'Decision Tree': {
            'max_depth': [None, 10, 20, 30]
            },
        'Random Forest': {
            'n_estimators': [100, 200],
            'max_depth': [10, 20]
            },
        'Gradient Boosting': {
            'n_estimators': [100, 200],
            'learning_rate': [0.01, 0.1]},
        'SVM': {
            'C': [0.1, 1, 10], 
            'kernel': ['linear', 'rbf']
            }
    }
models: {
        'Logistic Regression': {import_module: 'sklearn.linear_model', model_name: 'LogisticRegression', model_params: {'max_iter': 1000}},
        'Decision Tree': {import_module: 'sklearn.tree', model_name: 'DecisionTreeClassifier', model_params: {'random_state': 42}},
        'Random Forest': {import_module: 'sklearn.ensemble', model_name: 'RandomForestClassifier', model_params: {'random_state': 42}},
        'Gradient Boosting': {import_module: 'sklearn.ensemble', model_name: 'GradientBoostingClassifier', model_params: {'random_state': 42}},
        'SVM': {import_module: 'sklearn.svm', model_name: 'SVC', model_params: {'probability': True}}
    }
train_test_split: {
    "test_size": 0.2,
    "random_state": 42,
}